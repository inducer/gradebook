#! /usr/bin/env python
#
# {{{ boilerplate

from camelot.core.orm import Session
import os, sys
sys.path.append(os.environ["GRADEBOOK_ROOT"])
import main

from camelot.core.conf import settings
settings.setup_model()

# }}}

from optparse import OptionParser

parser = OptionParser(usage="usage: %prog [options] COURSE_ID ASSIGNMENT_KIND ASSIGNMENT_NUMBER ASSIGNMENT_PREFIX")
parser.add_option("-r", "--record",
                  action="store_true", dest="verbose", default=False,
                  help="determine state of homework and save to DB")

(options, args) = parser.parse_args()

if len(args) < 4:
    parser.print_usage()
    import sys
    sys.exit(1)

course_id, kind, number, name = args

session = Session()

from gradebook.model import (Student, Assignment,
        AssignmentStateChange as ASC)

assmt = (session.query(Assignment)
        .filter(Assignment.course_id == course_id)
        .filter(Assignment.kind == kind)
        .filter(Assignment.number == number)).one()

print "---------------------------------------------"
print unicode(assmt)
print "---------------------------------------------"

from datetime import date

today = date.today()

import os

try:
    os.mkdir(name)
except OSError:
    pass

cwd = os.path.join(os.getcwd(), name)
print cwd

from subprocess import call

for student in session.query(Student):
    user_name = student.user_name
    print user_name

    state_changes = list(session.query(ASC)
            .filter(ASC.assignment == assmt)
            .filter(ASC.student == student)
            .order_by(ASC.timestamp))

    do_grab = True
    for sc in state_changes:
        if sc.new_state == "extension" and sc.due_date >= today:
            print "  *** not due yet"
            do_grab = False

    if options.record:
        for sc in state_changes:
            if sc.new_state == "unavailable":
                print "  *** previously unavailable: %s" % sc.timestamp
                do_grab = False

            if sc.new_state == "retrieved":
                print "  *** previously retrieved: %s" % sc.timestamp
                do_grab = False

    else:
        if not do_grab:
            continue

        do_grab = False

        for sc in state_changes:
            if sc.new_state == "retrieved":
                print "  *** recorded as available: %s" % sc.timestamp
                do_grab = True

    if not do_grab:
        continue

    retcode = call(["git", "clone", "forge:%s-%s"
        % (name, user_name), user_name], cwd=cwd)

    if options.record:
        if retcode == 0:
            print "  *** success"
            session.add(ASC(
                student=student, assignment=assmt,
                new_state="retrieved"))
            session.flush()

        else:
            print "  *** error"
            session.add(ASC(
                student=student, assignment=assmt,
                new_state="unavailable"))
            session.flush()

