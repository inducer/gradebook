#! /usr/bin/env python
from optparse import OptionParser

parser = OptionParser(usage="usage: %prog [options] COURSE_ID ASSIGNMENT_KIND ASSIGNMENT_NUMBER ASSIGNMENT_PREFIX")
parser.add_option("-s", "--send", action="store_true")
parser.add_option("-p", "--preview", action="store_true")
parser.add_option("--student")

(options, args) = parser.parse_args()

if len(args) < 4:
    parser.print_usage()
    import sys
    sys.exit(1)

course_id, kind, number, name = args

# {{{ boilerplate

from camelot.core.orm import Session
import os, sys
sys.path.append(os.environ["GRADEBOOK_ROOT"])
import main

from camelot.core.conf import settings
settings.setup_model()

# }}}

# {{{ helper functionality

from HTMLParser import HTMLParser
import htmlentitydefs

class HTMLTextExtractor(HTMLParser):
    # http://stackoverflow.com/a/7778368/1148634
    def __init__(self):
        HTMLParser.__init__(self)
        self.result = [ ]

    def handle_data(self, d):
        self.result.append(d)

    def handle_charref(self, number):
        codepoint = int(number[1:], 16) if number[0] in (u'x', u'X') else int(number)
        self.result.append(unichr(codepoint))

    def handle_entityref(self, name):
        try:
            codepoint = htmlentitydefs.name2codepoint[name]
        except KeyError:
            self.result.append("&%s" % name)
        else:
            self.result.append(unichr(codepoint))

    def get_text(self):
        return u''.join(self.result)

def html_to_text(html):
    s = HTMLTextExtractor()
    s.feed(html)
    return s.get_text()

from vt100 import c

# }}}

session = Session()

from gradebook.model import (Student, Assignment,
        AssignmentStateChange as ASC)

assmt = (session.query(Assignment)
        .filter(Assignment.course_id == course_id)
        .filter(Assignment.kind == kind)
        .filter(Assignment.number == number)).one()

print "---------------------------------------------"
print unicode(assmt)
print "---------------------------------------------"

graded_count = 0
unavailable_count = 0
not_done_count = 0

MAIL_TEMPLATE = u"""
Dear ${student.first_name} ${student.last_name},

This is an automated email about ${assmt.kind} ${assmt.number} of the ${assmt.course} class at ${assmt.course.school}.

We've retrieved your work from the repository called
${name}-${student.user_name} on the class collaboration space 
on ${retrieval_sc.timestamp}.

You received ${"%.1f" % graded_sc.points} out of ${"%.1f" % assmt.possible_points} possible points (${"%.0f" % (100*graded_sc.points/assmt.possible_points)} %).

A report with specific comments and a breakdown of points awarded
follows after this message.  If you have any questions or would
like to discuss this, please don't hesitate to reply to this email.

${assmt.course.instructor_signature}

===============================================================
Detailed report:
===============================================================
${report}
"""

qry = session.query(Student)

if options.student is not None:
    qry = qry.filter(Student.user_name == options.student)

qry = qry.order_by(Student.user_name)

for student in qry:
    user_name = student.user_name

    state_changes = list(session.query(ASC)
            .filter(ASC.assignment == assmt)
            .filter(ASC.student == student)
            .order_by(ASC.timestamp))

    last_sc = None

    retrieval_sc = None
    graded_sc = None
    report_sc = None

    for sc in state_changes:
        last_sc = sc

        if sc.new_state == "retrieved":
            retrieval_sc = sc
        elif sc.new_state == "graded":
            graded_sc = sc
        elif sc.new_state == "report-sent":
            report_sc = sc
        elif sc.new_state == "do-over":
            retrieval_sc = None
            graded_sc = None
            report_sc = None
        elif sc.new_state in ["grading-started", "retrieved", "unavailable",
                "extension"]:
            pass
        else:
            raise RuntimeError("invalid assignment state '%s' for '%s'"
                    % (sc.new_state, user_name))

    if graded_sc is None:
        if last_sc.new_state == "unavailable":
            unavailable_count += 1
            symbol = "-"
            col = c("normal")
        else:
            not_done_count += 1
            symbol = "?"
            col = c("bright purple")+c("blink")

        print "%-10s: %s[%s] %s at %s by %s%s" % (
                user_name, col, symbol, last_sc.new_state,
                last_sc.timestamp, last_sc.user, c("normal"))
        continue

    if report_sc is not None:
        report_blurb = " (report sent at %s)" % report_sc.timestamp
    else:
        report_blurb = ""

    print "%-10s: [X] graded (%.1f points by %s at %s)%s" % (
            user_name, graded_sc.points,
            graded_sc.user, graded_sc.timestamp, report_blurb)
    graded_count += 1

    if report_sc is not None:
        continue

    report = html_to_text(graded_sc.report)

    from mako.template import Template
    mail = Template(MAIL_TEMPLATE, strict_undefined=True).render(
        assmt=assmt,
        student=student,
        graded_sc=graded_sc,
        retrieval_sc=retrieval_sc,
        name=name,
        report=report)

    email = [contact.value for contact in student.contacts
            if contact.kind=="email"][0]

    if options.preview:
        print c("bright purple")+"-"*75
        print "EMAIL TO %s" % email
        print "-"*75+c("normal")
        print mail

        raw_input("%s[%s Enter]%s" % (c("bright purple"), user_name, c("normal")))

    if options.send:
        from subprocess import Popen, PIPE
        mutt = Popen(["mutt",
            "-s", unicode(assmt),
            "-c", "andreas@tiker.net",
            email],
            stdin=PIPE)
        mutt.communicate(mail.encode("utf-8"))
        if mutt.returncode:
            raise RuntimeError("sending failed: code %s" % mutt.returncode)
        else:
            session.add(ASC(
                student=student, assignment=assmt,
                new_state=u"report-sent"))
            session.flush()


if options.student is None:
    print "STATS: %d graded, %d not done, %d unavailble" % (
            graded_count, not_done_count, unavailable_count)
