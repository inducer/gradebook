#! /usr/bin/env python

from datetime import date
from vt100 import c
import os
from subprocess import call, check_output

from optparse import OptionParser

parser = OptionParser(usage="usage: %prog [options] COURSE_ID ASSIGNMENT_KIND ASSIGNMENT_NUMBER ASSIGNMENT_PREFIX")
parser.add_option("-n", "--no-terminal",
                  action="store_true",
                  help="don't automatically start a terminal in the grading directory")
parser.add_option("--student")

(options, args) = parser.parse_args()

if len(args) < 4:
    parser.print_usage()
    import sys
    sys.exit(1)

course_id, kind, number, name = args

# {{{ camelot init

from camelot.core.orm import Session
import os, sys
sys.path.append(os.environ["GRADEBOOK_ROOT"])
import main

from camelot.core.conf import settings
settings.setup_model()

from gradebook.model import get_user

# }}}

session = Session()

from gradebook.model import (Student, Assignment,
        AssignmentStateChange as ASC)

assmt = (session.query(Assignment)
        .filter(Assignment.course_id == course_id)
        .filter(Assignment.kind == kind)
        .filter(Assignment.number == number)).one()

print "---------------------------------------------"
print unicode(assmt)
print "---------------------------------------------"

today = date.today()

def print_state(s):
    print "%s%-10s: %s%s" % (c("purple"), user_name, s, c("normal"))


cwd = os.path.join(os.getcwd(), name)

qry = session.query(Student)

if options.student is not None:
    qry = qry.filter(Student.user_name == options.student)

qry = qry.order_by(Student.user_name)

for student in qry:
    user_name = student.user_name

    state_changes = list(session.query(ASC)
            .filter(ASC.assignment == assmt)
            .filter(ASC.student == student)
            .order_by(ASC.timestamp))

    extension_sc = None
    retrieval_sc = None
    unavailable_sc = None
    graded_sc = None
    grading_started_sc = None

    needs_grading = None
    for sc in state_changes:
        if sc.new_state == "extension" and sc.due_date >= today:
            extension_sc = sc
        elif sc.new_state == "retrieved":
            retrieval_sc = sc
        elif sc.new_state == "graded":
            graded_sc = sc
        elif sc.new_state == "unavailable":
            unavailable_sc = sc
        elif sc.new_state == "grading-started":
            grading_started_sc = sc
        elif sc.new_state == "do-over":
            print_state("do-over granted by %s at %s" % (sc.user, sc.timestamp))

            # don't reset extension_sc
            retrieval_sc = None
            unavailable_sc = None
            graded_sc = None
            grading_started_sc = None
        elif sc.new_state in ["extension", "report-sent"]:
            pass
        else:
            raise RuntimeError("invalid assignment state '%s' for '%s'"
                    % (sc.new_state, user_name))

    if extension_sc is not None:
        print_state("extension granted by %s at %s until %s" % (
                extension_sc.user, extension_sc.timestamp,
                extension_sc.due_date))
        continue
    if unavailable_sc is not None:
        print_state("recorded as unavailable by %s at %s" % (
                unavailable_sc.user, unavailable_sc.timestamp))
        continue
    if graded_sc is not None:
        print_state("graded (%s points) by %s at %s" % (
                graded_sc.points, graded_sc.user, graded_sc.timestamp))
        continue

    if retrieval_sc is None:
        raise RuntimeError("no retrieval decision for '%s'" % user_name)

    if grading_started_sc is not None:
        print_state("grading started by %s at %s" % (
                grading_started_sc.user, grading_started_sc.timestamp))
        if get_user() != sc.user:
            print "%s  *** that's not us, skipping%s" % (c("bright red"), c("normal"))
            continue
    else:
        print_state("marking as started")
        session.add(ASC(
            student=student, assignment=assmt,
            new_state=u"grading-started"))
        session.flush()

    print_state("grading...")

    while True:
        hw_dir = os.path.join(cwd, user_name)

        if not os.path.exists(hw_dir):
            raise RuntimeError("directory '%s' does not exist--run grab-hw"
                    % hw_dir)

        grabbed_rev = check_output(["git", "rev-parse", "HEAD"], cwd=hw_dir).strip()
        if retrieval_sc.remark is not None and grabbed_rev != retrieval_sc.remark:
            raise RuntimeError("repo rev (%s) does not match "
                    "expected rev (%s)--run grab-hw" % (
                        grabbed_rev, retrieval_sc.remark))

        report_file = os.path.join(hw_dir, "grade.txt")

        if not os.path.exists(report_file):
            with open(os.path.join(cwd, "template.txt"), "rb") as inf:
                with open(report_file, "wb") as outf:
                    outf.write(inf.read())

        if not options.no_terminal:
            call(["x-terminal-emulator"], cwd=hw_dir)

        import os
        if "EDITOR" in os.environ:
            editor = os.environ["EDITOR"].split()
        else:
            editor = ["vim"]

        call(editor+[report_file])

        import codecs
        with codecs.open(report_file, "r", "utf-8") as inf:
            report_lines = [l.rstrip() for l in inf.readlines()]

        import re
        total_re = re.compile("^TOTAL(.*)::.*$")
        subtotal_re = re.compile("^SUBTOTAL(.*)::.*$")
        points_re = re.compile("^.*::\s*([-0-9.]+)\s*$")

        running_total = 0
        running_subtotal = 0

        for i, l in enumerate(report_lines):
            m = total_re.match(l)
            if m is not None:
                report_lines[i] = "TOTAL%s:: %s" % (m.group(1), running_total)
                continue

            m = subtotal_re.match(l)
            if m is not None:
                report_lines[i] = "SUBTOTAL%s:: %s" % (m.group(1), running_subtotal)
                running_subtotal = 0
                continue

            m = points_re.match(l)
            if m is not None:
                pts = float(m.group(1))
                running_total += pts
                running_subtotal += pts

        report = u"\n".join(report_lines)

        with codecs.open(report_file, "w", "utf-8") as outf:
            outf.write(report)

        print 75*"-"
        print "Grade report for '%s'" % user_name
        print 75*"-"
        print report
        print 75*"-"
        print "Total: %s/%s points" % (running_total, assmt.possible_points)

        answer = raw_input("accept [n]?")
        if answer == "y":
            session.add(ASC(
                student=student, assignment=assmt,
                new_state=u"graded", points=running_total,
                report="<pre>%s</pre>" % report))
            session.flush()
            break
