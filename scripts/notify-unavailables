#! /usr/bin/env python
#
# {{{ boilerplate

from camelot.core.orm import Session
import os, sys
sys.path.append(os.environ["GRADEBOOK_ROOT"])
import main

from camelot.core.conf import settings
settings.setup_model()

# }}}

course_id, kind, number, name = sys.argv[1:]

session = Session()

from gradebook.model import (Student, Assignment,
        AssignmentStateChange as ASC)

assmt = (session.query(Assignment)
        .filter(Assignment.course_id == course_id)
        .filter(Assignment.kind == kind)
        .filter(Assignment.number == number)).one()

print "---------------------------------------------"
print unicode(assmt)
print "---------------------------------------------"

for student in session.query(Student):
    user_name = student.user_name
    print user_name

    state_changes = list(session.query(ASC)
            .filter(ASC.assignment == assmt)
            .filter(ASC.student == student)
            .order_by(ASC.timestamp))

    is_unavail = False
    for sc in state_changes:
        if sc.new_state == "unavailable":
            print "  *** previously unavailable: %s" % sc.timestamp
            is_unavail = True
            break

    if not is_unavail:
        continue

    from mako.template import Template
    mail = Template(u"""
Dear ${student.first_name.split()[0]},

This email is about ${assmt.kind} ${assmt.number} of the ${assmt.course} class at ${assmt.course.school}.

I'm writing to let you know that I did not find a git repository
corresponding to the assignment for you on http://forge.tiker.net.
If you meant to submit homework, but are still receiving this email,
please get in touch. If not, please ignore this email.

Your repository should have been called ${name}-${student.user_name}.

Dont' worry, I won't keep spamming you--this is the only email of
this kind you will receive.

${assmt.course.instructor_signature}
""", strict_undefined=True).render(
        assmt=assmt,
        student=student,
        name=name)

    email = [c.value for c in student.contacts if c.kind=="email"][0]

    from subprocess import Popen, PIPE

    mutt = Popen(["mutt",
        "-s", unicode(assmt),
        "-c", "andreas@tiker.net",
        email],
        stdin=PIPE)
    mutt.communicate(mail)
    if mutt.returncode:
        raise RuntimeError("sending failed: code %s" % mutt.returncode)

    #raw_input()


